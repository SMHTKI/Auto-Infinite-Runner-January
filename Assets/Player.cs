//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player"",
    ""maps"": [
        {
            ""name"": ""Run Controls"",
            ""id"": ""2224c643-d9a9-4d2d-b60b-1038dd4c6bcd"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""45ca392d-d72f-4d1f-8201-d4cada17b0b8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""2b906d3b-1ea6-4e52-98f8-e8ee729ff9ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""46d9ab3d-ecab-4429-b663-6db46a378a5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trick One"",
                    ""type"": ""Button"",
                    ""id"": ""441fc2fc-b165-4311-9b89-178c720c6906"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trick Two"",
                    ""type"": ""Button"",
                    ""id"": ""490a4da5-bfd2-46bf-8fe4-fc3e79eda6e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b29084c7-75fe-4a1c-90e3-aec30cf12804"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cca5dc57-cbcd-486e-bc11-b213aeb94c92"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f381c5ed-77c6-4857-b2ad-4b0079f60751"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""91a0f99a-d40c-4676-ab5f-1886862dbf0e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""4d720f3e-08d4-43bf-8270-c929dbcaa1dd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""77a62ad1-a300-4b48-acf5-f4c51e963396"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a91c2e39-be5c-4a80-a739-a3fcbf134942"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3839c6c5-e61d-4a76-a172-e27ef7a66077"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0d0b0ba6-20c0-44d8-bf14-79464226543c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trick One"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""24ca9514-f3d4-438d-a2a9-ebf30be13f87"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Trick Two"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menu Controls"",
            ""id"": ""30776aa0-e62d-41f1-bbf4-dac1acd3216a"",
            ""actions"": [
                {
                    ""name"": ""Escape Pause"",
                    ""type"": ""Button"",
                    ""id"": ""7e51edc7-32ed-448f-bca1-ed48cf53426f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ce052a88-0bc9-4813-9d2d-98fde9a6e9e6"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Run Controls
        m_RunControls = asset.FindActionMap("Run Controls", throwIfNotFound: true);
        m_RunControls_Pause = m_RunControls.FindAction("Pause", throwIfNotFound: true);
        m_RunControls_Movement = m_RunControls.FindAction("Movement", throwIfNotFound: true);
        m_RunControls_Jump = m_RunControls.FindAction("Jump", throwIfNotFound: true);
        m_RunControls_TrickOne = m_RunControls.FindAction("Trick One", throwIfNotFound: true);
        m_RunControls_TrickTwo = m_RunControls.FindAction("Trick Two", throwIfNotFound: true);
        // Menu Controls
        m_MenuControls = asset.FindActionMap("Menu Controls", throwIfNotFound: true);
        m_MenuControls_EscapePause = m_MenuControls.FindAction("Escape Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Run Controls
    private readonly InputActionMap m_RunControls;
    private List<IRunControlsActions> m_RunControlsActionsCallbackInterfaces = new List<IRunControlsActions>();
    private readonly InputAction m_RunControls_Pause;
    private readonly InputAction m_RunControls_Movement;
    private readonly InputAction m_RunControls_Jump;
    private readonly InputAction m_RunControls_TrickOne;
    private readonly InputAction m_RunControls_TrickTwo;
    public struct RunControlsActions
    {
        private @Player m_Wrapper;
        public RunControlsActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_RunControls_Pause;
        public InputAction @Movement => m_Wrapper.m_RunControls_Movement;
        public InputAction @Jump => m_Wrapper.m_RunControls_Jump;
        public InputAction @TrickOne => m_Wrapper.m_RunControls_TrickOne;
        public InputAction @TrickTwo => m_Wrapper.m_RunControls_TrickTwo;
        public InputActionMap Get() { return m_Wrapper.m_RunControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RunControlsActions set) { return set.Get(); }
        public void AddCallbacks(IRunControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_RunControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RunControlsActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @TrickOne.started += instance.OnTrickOne;
            @TrickOne.performed += instance.OnTrickOne;
            @TrickOne.canceled += instance.OnTrickOne;
            @TrickTwo.started += instance.OnTrickTwo;
            @TrickTwo.performed += instance.OnTrickTwo;
            @TrickTwo.canceled += instance.OnTrickTwo;
        }

        private void UnregisterCallbacks(IRunControlsActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @TrickOne.started -= instance.OnTrickOne;
            @TrickOne.performed -= instance.OnTrickOne;
            @TrickOne.canceled -= instance.OnTrickOne;
            @TrickTwo.started -= instance.OnTrickTwo;
            @TrickTwo.performed -= instance.OnTrickTwo;
            @TrickTwo.canceled -= instance.OnTrickTwo;
        }

        public void RemoveCallbacks(IRunControlsActions instance)
        {
            if (m_Wrapper.m_RunControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRunControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_RunControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RunControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RunControlsActions @RunControls => new RunControlsActions(this);

    // Menu Controls
    private readonly InputActionMap m_MenuControls;
    private List<IMenuControlsActions> m_MenuControlsActionsCallbackInterfaces = new List<IMenuControlsActions>();
    private readonly InputAction m_MenuControls_EscapePause;
    public struct MenuControlsActions
    {
        private @Player m_Wrapper;
        public MenuControlsActions(@Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @EscapePause => m_Wrapper.m_MenuControls_EscapePause;
        public InputActionMap Get() { return m_Wrapper.m_MenuControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMenuControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Add(instance);
            @EscapePause.started += instance.OnEscapePause;
            @EscapePause.performed += instance.OnEscapePause;
            @EscapePause.canceled += instance.OnEscapePause;
        }

        private void UnregisterCallbacks(IMenuControlsActions instance)
        {
            @EscapePause.started -= instance.OnEscapePause;
            @EscapePause.performed -= instance.OnEscapePause;
            @EscapePause.canceled -= instance.OnEscapePause;
        }

        public void RemoveCallbacks(IMenuControlsActions instance)
        {
            if (m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuControlsActions @MenuControls => new MenuControlsActions(this);
    public interface IRunControlsActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnTrickOne(InputAction.CallbackContext context);
        void OnTrickTwo(InputAction.CallbackContext context);
    }
    public interface IMenuControlsActions
    {
        void OnEscapePause(InputAction.CallbackContext context);
    }
}
